@page "/main"
@inject IHttpClientFactory ClientFactory

<PageTitle>Main</PageTitle>
<div class="container-fluid background">
    <div class="row">
        <div id="one" class="col-sm-2"></div>
        <div class="col-sm-8 main-content">
            <div class="map-wrapper">
                <Map @ref="mapRef" MapOptions="@mapOptions"></Map>
            </div>
            <div id="map-panel">
                @if (getLocationsError)
                {
                    <p>Unable to render locations.</p>
                }
                else
                {
                    <p>@location.Name</p>
                }
            </div>
        </div>
        <div class="panel col-sm-2">
        </div>
    </div>
</div>

<!--Dzia³a nie dotykaæ-->
<style> 
    #mapId {
        height: 100%;
        border-radius: 1rem;
    }
</style>
<!--Koniec-->

@code {
    private Map? mapRef;
    private MapOptions mapOptions = new MapOptions()
        {
            DivId = "mapId",
            Center = new LatLng(52.12469880945258, 20.667213695109037),
            Zoom = 15, //13
            UrlTileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
            SubOptions = new MapSubOptions()
            {
                Attribution = "&copy; <a lhref='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>",
                TileSize = 512,
                ZoomOffset = -1,//-1
                MaxZoom = 17,
            }
        };

    private bool getLocationsError = false;
    private LocationModel location = new LocationModel();

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5275/api/location/1");
        request.Headers.Add("Accept", "application/json");

        var httpClient = ClientFactory.CreateClient();
        var response = await httpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            location = await JsonSerializer.DeserializeAsync<LocationModel>(responseStream);
        }
        else
        {
            getLocationsError = true;
        }
    }
}
