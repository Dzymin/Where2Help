@page "/main"

@using BlazorLeaflet.Models;
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime jsRuntime

<PageTitle>Main</PageTitle>
<ModalWindow />
<div class="container-fluid background">
    <div class="row">
        <div id="one" class="col-sm-2"></div>
        <div class="col-sm-8 main-content">
            <div class="map-wrapper">
                <LeafletMap Map="@map"></LeafletMap>
            </div>
            <div id="map-panel">
            </div>
        </div>
        <div class="panel col-sm-2">
        </div>
    </div>
</div>

@code {
    private Map map;

    private bool getLocationsError = false;
    private LocationModel location = new LocationModel();

    protected override async Task OnInitializedAsync()
    {
        map = new Map(jsRuntime)
        {
            Center = new LatLng(51f, 21f),
            Zoom = 4.8f
        };

        map.OnInitialized += () =>
        {
            map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"
            });
        };

        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7275/api/location/1");
        request.Headers.Add("Accept", "application/json");

        var httpClient = ClientFactory.CreateClient();
        var response = await httpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            location = await JsonSerializer.DeserializeAsync<LocationModel>(responseStream);
        }
        else
        {
            getLocationsError = true;
        }

        var marker = new Marker(location.Latitude, location.Longitude)
        {
            Tooltip = new Tooltip
            {
                Content = "Example marker"
            }
        };
        map.AddLayer(marker);
    }
}
